plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id "org.sonarqube" version "3.4.0.2513"
}

version = "${minecraft_version}-${growthcraft_version}"
group = 'growthcraft'
archivesBaseName = 'growthcraft-deco'

sonarqube {
    properties {
        property "sonar.projectKey", "Growthcraft-Deco"
        property "sonar.organization", "growthcraftce"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('========================================')
println('Java: ' + System.getProperty('java.version'))
println(' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ')')
println('Arch: ' + System.getProperty('os.arch'))
println("Build Version: ${growthcraft_version}")
println('----------------------------------------')

minecraft {
    mappings channel: 'official', version: '1.19.3'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'growthcraft_deco'

            mods {
                gowthcraft_deco {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'examplemod'

            mods {
                gowthcraft_deco {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'examplemod'

            mods {
                growthcraft_deco {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'growthcraft_deco', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                growthcraft_deco {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // JEI, Tinker's Construct, Mantle, Iron Chests, Natura, etc.
    maven { url = "https://dvs1.progwml6.com/files/maven" }
    // The One Probe
    maven { url = "https://maven.tterrag.com/" }
    // Patchouli
    maven { url = 'https://maven.blamejared.com' }
}

dependencies {
    minecraft "net.minecraftforge:forge:${forge_version}"

    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
            "Specification-Title"     : "growthcraft-deco",
            "Specification-Vendor"    : "growthcraft",
            "Specification-Version"   : "8",
            "Implementation-Title"    : project.name,
            "Implementation-Version"  : project.jar.archiveVersion,
            "Implementation-Vendor"   : "growthcraft",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
