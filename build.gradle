buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.4.0.2513"
    }
}

plugins {
    id "org.sonarqube" version "3.4.0.2513"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: "org.sonarqube"

version = "${growthcraft_version}"
group = 'growthcraft'
archivesBaseName = 'growthcraft_deco'

sonarqube {
    properties {
        property "sonar.projectKey", "Growthcraft-Deco"
        property "sonar.organization", "growthcraftce"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('========================================')
println('Java: ' + System.getProperty('java.version'))
println(' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ')')
println('Arch: ' + System.getProperty('os.arch'))
println("Build Version: ${growthcraft_version}")
println('----------------------------------------')

minecraft {
    // Mappings
    mappings channel: 'official', version: "${minecraft_version}"
    // Access Transformers, this is a fixed path.
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                growthcraft_deco {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                growthcraft_deco {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'growthcraft_deco', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                growthcraft_deco {
                    source sourceSets.main
                }
            }
        }
    }
}

//sourceSets.main.resources { srcDir 'src/generated/resources' }

/**
 * Project Dependent Repositories
 * ForgeGradle automatically adds the Forge maven and Maven Central for you
 */
repositories {
    // JEI, Tinker's Construct, Mantle, Iron Chests, Natura, etc.
    maven { url = "https://dvs1.progwml6.com/files/maven" }
    // The One Probe
    maven { url = "https://maven.tterrag.com/" }
    // Patchouli
    maven { url = 'https://maven.blamejared.com' }
}

/**
 * Specify the version of Minecraft to use. If this is any group other than 'net.minecraft', it is assumed
 * that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
 * The userdev artifact is a special name and will get all sorts of transformations applied to it.
 * minecraft "net.minecraftforge:forge:${forge_version}"
 *
 * Real mod deobf dependency examples - these get remapped to your current mappings
 * compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
 * runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency
 * mplementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency
 */
dependencies {
    minecraft "net.minecraftforge:forge:${forge_version}"

    /** Compile time Dependencies
     * Include mods that we have a direct dependency with.
     */
    //compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}:api")

    /** Runtime Dependencies
     *  Include mods the we need while testing during runtime. When adding mods
     *  to this list, place the version into the gradle.properties file.
     */
    //runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")
    //runtimeOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-${minecraft_version_short}:${minecraft_version_short}-${theoneprobe_version}")
    //runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")
}

jar {
    manifest {
        attributes([
            "Specification-Title": "growthcraft-deco",
            "Specification-Vendor": "growthcraft",
            "Specification-Version": "7",
            "Implementation-Title": project.name,
            "Implementation-Version": "${growthcraft_version}",
            "Implementation-Vendor" :"growthcraft",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'src'
}

task deobjJar(type: Jar) {
    from sourceSets.main.output
    classifier 'deobf'
}

artifacts {
    archives sourcesJar, deobjJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}
